Consider an edge e.  We wish to assign as the weight of e the maximum possible incoming flow that e could see over all possible configurations of client-to-client TCP flows.  To find this value, we seek the corresponding value for all incoming edges to e.  The dependence continues recursively.  Calculation of the values requires finding the contribution of each edge to edges into which it flows.  By examining each pair of consecutive edges for each flow, we accumulate the maximum possible contribution for each pair.  Since Dijkstra's single-source-shortest-path algorithm yields a tree, the contributions of all incoming edges to a given edge are independent of each other.  Summing these contributions yields the maximum incoming flow to an edge.  The algorithm is as follows:

For each client:
    Find shortest paths to all other clients.
    Set the partial flow for each edge in this tree to zero.
    For each path:
	Find the minimum bandwidth along the path.
	Update the partial flow for each edge in the path to MAX(minimum bandwidth, current partial flow).
    For each path:
	Consider consecutive edges e1 and e2 in the path.
	Let the room left in e2 = bw[e2] - flow[e1][e2].
	Add to flow[e1][e2] the minimum of the partial flow through e2 and the room left in e2.
	If e1 is adjacent to the source client, set its edge weight to the partial flow through e1.
Set the weight of each vertex to the sum of edge weights of incoming edges to that vertex.

Looping through all source-destination pairs takes O(N^2) time.  Each time through the inner loop, the shortest path tree is calculated, taking O(E log N) time.  Each edge in the tree is traversed a constant number of times, taking O(E) time. At each edge, the flowmap is updated, taking O(E log E) time total.  The resulting runtime is O( N^2 * E log E ) time.