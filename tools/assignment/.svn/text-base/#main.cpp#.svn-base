#include <LEDA/graph.h>
#include <time.h>
#include <LEDA/set.h>
#include <LEDA/d_array.h>
#include <unistd.h>
#include <ctype.h>
#include <fstream>

#include "gmlp.h"
#include "assignment.h"
#include "flow.h"

void usage()
{
    cerr<<"Usage: assign <input.gml>  -cores cores.gml -o outputFile "<<endl
	<<"\t[-ones | -pattern <patternFile> | -flowmap <flowmapFile> | -worst] "<<endl
	<<"\t[-transform <transformFile>] [-seed <randSeed>]"<<endl
	<<"\t[-random #] [-blob #] [-chaco_node] [-chaco_edge] [-metis_node] [-metis_edge] [-existing]"<<endl;
}

//This holds info about the arguments
struct Args
{
    set<string> hasArg;
    set<string> flags;
    d_array<string,string> argFor;
    
    string inputFile;
    list<int> splits;
};

//Parse arguments
int getArgs(int argc, char* argv[], struct Args* args)
{
  int fileArg=0;
  int i;
  set<string> flags;
  for (i=1;i<argc;i++)
  {
      if (argv[i][0]=='-' && strlen(argv[i])>1)
      {
	  string opt=string(argv[i]+1);
	  args->flags.insert(opt);
	  if (args->hasArg.member(opt))
	  {
	      i++;
	      if (i==argc)
		  return 0;
	      if (argv[i][0] == '-')
	      {
		i--;
		continue;
	      }
	      args->argFor[opt]=argv[i];
	  }
      }
      else if (fileArg==0)
	  fileArg=i;
  }
  if (fileArg==0)
      return 0;
  args->inputFile=argv[fileArg];
  return true;
}

//Output a transform graph for diagnostic purposes
int outputTransformGraph(weighted_graph &wg, ostream& out)
{
    mn_graph & g = wg.g;
    mn_graph transform;
    edge e,e1;
    edge_array<node> toNode(g,nil);
    node vt;
    forall_edges(e,g)
    {
      if (wg.weight(e) == 0)
	continue;
      toNode[e]=transform.new_node();
      transform[toNode[e]].i("weight") = (int) wg.scaledWeight(e);
    }
    forall_edges(e,g)
    {
	if (toNode[e]==nil)
	    continue;
	vt = target (e);
	forall_out_edges (e1, vt)
	{
	    double w=wg.flowAcross(e,e1);
	    if (w==0.0)
		continue;
	    edge newEdge=transform.new_edge(toNode[e],toNode[e1]);
	    transform[newEdge].i("weight")=(int)(w * wg.edgeScale());
	}
    }
    transform.make_directed();
    printf("Score factor: %f\n",wg.edgeScale()/2);
    printf("Saving transform...\n");
    out.setf(ios::showpoint);
    transform.write_gml(out,write_node_attribute,
			write_edge_attribute);
    return true;
}

//Save the assigned graph to a gml file.
void saveAssign(assignment* asg, mn_graph& g, string* coreNames,
		string outputName)
{
    edge e;
    if (coreNames)
    {
	forall_edges(e,g)
	{
	    g[e].s("assignment")=coreNames[asg ? asg->assignmentOf(e): 0];
	}
    }
    else
    {
	forall_edges(e,g)
	{
	    g[e].i("assignment")=asg ? asg->assignmentOf(e) : 0;
	}
    }
    ofstream asgOut(outputName);
    if (!asgOut)
    {
      cerr<<"Could not open output file \""<<outputName<<"\""<<endl;
      exit(1);
    }
    asgOut.setf(ios::showpoint);
    g.write_gml(asgOut,write_node_attribute, write_edge_attribute);
    asgOut.flush();
}

void constrain(
int main(int argc, char* argv[])
{
  struct Args args;

  //These options have arguments
  args.hasArg.insert("o");
  args.hasArg.insert("stats");
  args.hasArg.insert("pattern");
  args.hasArg.insert("transform");
  args.hasArg.insert("seed");
  args.hasArg.insert("cores");
  args.hasArg.insert("flowmap");
  args.hasArg.insert("blob");
  args.hasArg.insert("random");
  
  clock_t startTime;
  string* coreNames=0;
  float t;
  int i;
  int seed;
  mn_graph g;
  raitner_parser gml(g);

  //Parse the args
  if (!getArgs(argc,argv,&args))
  {
      usage();
      return 1;
  }

  //Choose seed
  if (args.flags.member("seed"))
      seed=atoi(args.argFor["seed"]);
  else
      seed=time(NULL);
  srand(seed);
  
  //Output statistics?
  FILE* out=args.flags.member("stats") ? fopen(args.argFor["stats"],"a") : 0;
  if (args.flags.member("stats") && out==0)
  {
      cerr<<"Bad stats filename."<<endl;
      usage();
      return 1;
  }

  //Read cores info
  if (args.flags.member("cores"))
  {
      //The argument is a list of comma separated numbers
    if (args.argFor["cores"].tail(4) != string(".gml"))
    {
      int i=0,num;
      string nums=args.argFor["cores"];
      while (i<nums.length())
      {
	num=0;
	while (isdigit(nums[i]))
	  num = num*10 +(nums[i++]-'0');
	args.splits.append(num);
	i++;
      }
    }
    else  //The argument is the name of a cores.gml file
    {
      mn_graph cores;
      raitner_parser gmlcores(cores);
      gmlcores.parse(args.argFor["cores"]);
      coreNames=new string[cores.number_of_nodes()];
      node v;
      int i=0;
      forall_nodes(v,cores)
      {
	  if (cores[v].s("type") != "core")
	      continue;
	  coreNames[i++]=cores[v].s("label");
      }
      args.splits.append(i);
    }
  }
  if (!gml.parse(args.inputFile))
  {
      cerr<<"Error parsing input!"<<endl;
      usage();
      return 1;
  }
  weighted_graph wg(g);
  //Now we weight the graph by the requested method
  if (args.flags.member("pattern"))
  {
      //Read the pattern in and use it to weight
      flow_pattern* pattern;
      string filename = args.argFor["pattern"];
      user_flow_pattern* p=new user_flow_pattern();
      ifstream in(filename);
      if (!in)
      {
	cerr << "Error opening pattern file, quitting." <<endl;
	exit(1);
      }
      if (!p->read_pattern(in))
      {
	cerr<<"Error reading pattern, quitting."<<endl;
	exit(1);
      }
      pattern=p;
      wg.weight_by_pattern(pattern);
      delete pattern;
      wg.scaleWeights();
  }
  else if (args.flags.member("ones"))
  {
      //Weight all edges and vertices with 1
      wg.weight_ones();
  }
  else if (args.flags.member("flowmap"))
  {
      //Use a flowmap to weight
      wg.weight_by_flowmap(args.argFor["flowmap"]);
      wg.scaleWeights();
  }
  else
  {
      //Use worst case
      wg.weight_worst_case();
      wg.scaleWeights();
  }

  if (args.flags.member("transform"))
  {
      ofstream tOut(args.argFor["transform"]);
      outputTransformGraph(wg, tOut);
      tOut.close();
  }
  
  //Check for bad weighting
  if (wg.maxVWeight == 0 && wg.maxEWeight == 0)
  {
      cerr<<"Error: All edges or vertices have zero weight."<<endl;
      cerr<<"Have you run 'addspecs' ?"<<endl;
      exit(1);
  }
  
  assignment_factory* f;
  int numCores;
  list<assignment_factory*> asgFactories;
  assignment* best=0;
  int numRandom = args.argFor["random"].length() ? atoi(args.argFor["random"]) : 1;
  int numBlob = args.argFor["blob"].length() ? atoi(args.argFor["blob"]) : 1;

  //Select appropriate assignment object factories
  if (args.flags.member("random"))
    for (i=0;i<numRandom;i++)
      asgFactories.push_back(new random_assignment::factory());
  if (args.flags.member("blob"))
    for (i=0;i<numBlob;i++)
      asgFactories.push_back(new blob_assignment::factory());
  if (args.flags.member("existing"))
    asgFactories.push_back(new existing_assignment::factory());
  if (args.flags.member("metis_node"))
    asgFactories.push_back(new metis_assignment::factory(false));
  if (args.flags.member("chaco_node"))
    asgFactories.push_back(new chaco_assignment::factory(false));
  if (args.flags.member("metis_edge"))
    asgFactories.push_back(new metis_assignment::factory(true));
  if (args.flags.member("chaco_edge"))
    asgFactories.push_back(new chaco_assignment::factory(true));

  //For each set of cores, do the assignments
  forall(numCores,args.splits)
  {
      int partV,partE;
      forall(f,asgFactories)
      {
	  //Is there anything to do?
	  if (numCores>1)
	  {
	      assignment* a=f->create(wg,numCores);
	      a->getGraphSize(partV,partE);
	      startTime=clock();
	      a->assign();
	      t=(clock()-startTime)/float(CLOCKS_PER_SEC);
	      double b=a->getBadness();
	      if (out)
		  fprintf(out,"%12d %12d %12d %6d %2d %s %10.0f %5.2f\n",
			  wg.g.number_of_nodes(), wg.g.number_of_edges(), partE, 
			  wg.numClients, numCores, a->name(), a->stress, t);
	      //Was this one better than the best so far?
	      if (best==0 || a->stress<best->stress)
	      {
		  if (best)
		      delete best;
		  best=a;
	      }
	      else
		  delete a;
	  }
	  else if (args.flags.member("o")) //There's nothing to do, dump all in one
	  {
	      cerr<<"Putting everything in the one core..."<<endl;
	      saveAssign(0,g,coreNames,args.argFor["o"]);
	      break;
	  }
      }
  }
  if (best)
  {
      //We found a best assignment, so save it if necessary
      cerr<<"Best was "<<best->name()<<"."<<endl;
      if (args.flags.member("o"))
	  saveAssign(best,g,coreNames, args.argFor["o"]);
      delete best;
  }
  //Cleanup
  forall(f,asgFactories)
    delete f;
  if (out)
    fclose(out);
  return 0;
}
