-------------------------------------------------------------------------------
Modelnet Linux Sample Install : From Start to Finish
-------------------------------------------------------------------------------

The following document contains the installation instructions for Modelnet,
assuming one linux system used as the emulator and two linux systems used
as the clients.

The systems will henceforth be referred to as 'emulator', 'clientone' and
'clienttwo'.

###############################################################################
* Set up OS on clients and emulators
###############################################################################

In this installation run, we use Ubuntu 10.04 for all systems. Simply install
and setup a stock Ubuntu installation on all systems.

Be sure to note the hostnames for each system: in this run, we connect each
host on a LAN using static IPs and modify /etc/hosts to associate the IP for
each system with its hostname. All the scripts we run rely on being able to
ping a computer based on its hostname. 

Alternatively, you could set up DHCP and DNS for the same effect, but that is 
outside the scope of this example.

###############################################################################
* Acquire a copy of the Modelnet code.
###############################################################################

Either the source repository version or a release > 0.99 should do.

###############################################################################
* Optionally, set up the MODELNET_PREFIX variables on all systems.
###############################################################################

The Makefiles included in this project default to MODELNET_PREFIX=/opt/modelnet
if they are not otherwise defined. Note that all systems in use must agree on 
the values for these variables. If you define these variables, define them 
identically on all systems. Or, leave them undefined and the defaults will be 
used.

###############################################################################
* On the client systems, compile and install libipaddr.so.
###############################################################################

From the root directory of the modelnet source:
$ cd client
$ make clean
$ make
$ sudo -E make install

libipaddr.so installs to MODELNET_PREFIX/lib.

###############################################################################
* On the emulator system, compile and install the kernel module.
###############################################################################

From the root directory of the modelnet source:
$ cd emulator/linux/module
$ make clean
$ make
$ sudo -E make install

Note that the environment variable KERNEL_DIR is used to point to the kernel
source directory. If it is not defined, it automatically uses the output of
/lib/modules/$(uname -r)/build/ in Linux.

linuxmodelnet.ko (the outputted kernel module) installs to MODELNET_PREFIX/lib.

###############################################################################
* On the topology creation system, build and install the topology build tools.
###############################################################################

allpairs is a program that generates a routing table based on a graph for the
desired network topology.

inet2xml converts an inet file to an XML graph file describing the emulated
topology.

mkmodel is used to make a model file from a graph and a hosts file.

First install the prerequisites:
g++ (GNU C++ Compiler) (version 4.4 used in this run)
libxerces-c-dev (version 3.1 used in this run)
libboost-graph-dev (version 1.4 used in this run)

Then, from the root directory of the modelnet source:
$ cd scripts/topology-build
$ make
$ sudo -E make install

allpairs, inet2xml and mkmodel installs to MODELNET_PREFIX/bin.

###############################################################################
* On all client and emulator systems, build and install libe, authd and gexec.
###############################################################################

First download the sources for each project from the following location:
$ wget -P /path/to/save/in http://www.theether.org/gexec/gexec-0.3.7.tar.gz
$ wget -P /path/to/save/in http://www.theether.org/libe/libe-0.3.1.tar.gz
$ wget -P /path/to/save/in http://www.theether.org/authd/authd-0.2.3.tar.gz

Then, extract each archive.
$ tar -xvzf /path/to/gexec-0.3.7.tar.gz
$ tar -xvzf /path/to/libe-0.3.1.tar.gz
$ tar -xvzf /path/to/authd-0.2.3.tar.gz

Compile and install libe, authd and gexec in that order.
First we need the dependencies. Install automake1.10 and autoconf before
proceeding.

---------------------------------------
For libe:
---------------------------------------
$ cd /path/to/libe-0.3.1
$ autoreconf
$ ./configure
$ make
$ sudo make install

---------------------------------------
For authd:
---------------------------------------
authd has a further dependency on libssl-dev so install it before proceeding.

In addition, we need to patch the Makefile for authd so it builds correctly.
The patch is available in the modelnet source code at patches/authd_patch.
So we use the following commands:

$ cd /path/to/authd-0.2.3
$ patch -p0 < /path/to/modelnet/patches/authd_patch
$ autoreconf
$ ./configure
$ make
$ sudo make install

---------------------------------------
For gexec:
---------------------------------------

$ cd /path/to/gexec-0.3.7
$ autoreconf
$ ./configure
$ make
$ sudo make install

The install segment will have an error at the end, but it doesn't matter.
The error in question is:
/usr/bin/install: cannot create regular file `/etc/xinetd.d/gexec': No such file or directory
make[1]: *** [install-data-local] Error 1
make[1]: Leaving directory `/home/arjun/scaletools/gexec-0.3.7'
make: *** [install-am] Error 2

But that's alright, since:
1. Ubuntu 10.04 doesn't seem to use xinetd.d
2. We weren't going to run gexecd as a service anyways. We shall invoke it from
the command line.
3. All that matters is that gexecd is put in our path, which the install
script did manage to do.

###############################################################################
* Create RSA public/private key pairs for authd and gexecd and deploy
###############################################################################

Follow the documentation at http://www.theether.org/authd/ to do this. A quick
description copied from that site follows below:

# Generation of a cluster-wide RSA public/private key pair:

foo# openssl genrsa -out auth_priv.pem
foo# chmod 600 auth_priv.pem
foo# openssl rsa -in auth_priv.pem -pubout -out auth_pub.pem

# Distribution of the cluster-wide RSA public/private pair (on each node, say 
bar1, bar2, ...):

foo# scp auth_priv.pem bar1:/etc/auth_priv.pem
foo# scp auth_pub.pem bar1:/etc/auth_pub.pem
foo# scp auth_priv.pem bar2:/etc/auth_priv.pem
foo# scp auth_pub.pem bar2/etc/auth_pub.pem
foo# ......

Once these steps are done, run authd and then gexecd as root on each client and
emulator node.

###############################################################################
* Install the topology-deploy scripts
###############################################################################
For client, starting from modelnet root directory:
$ cd scripts/topology-deploy
$ sudo -E make client

For emulator, starting from modelnet root directory:
$ cd scripts/topology-deploy
$ sudo -E make emulatorcore

For installing all the scripts, we use "sudo -E make install". There is no
downside to installing all the scripts on all of the machines.





